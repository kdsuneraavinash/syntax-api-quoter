/*
 *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
plugins {
    id "com.github.node-gradle.node" version "2.2.4"
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'war'
}

description = 'Ballerina - Syntax API Quoter'

group = 'io.ballerinalang'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation name: 'ballerina-parser-2.0.0-Preview6-SNAPSHOT'
    implementation name: 'ballerina-tools-api-2.0.0-Preview5-SNAPSHOT'

    implementation('com.google.code.gson:gson:2.8.6') {
        because("To read the JSON file with the syntax information")
    }
    implementation(group: 'commons-cli', name: 'commons-cli', version: '1.3.1') {
        because("To handle command line arguments")
    }
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'pring-boot-starter-json'
    }

    testImplementation('org.testng:testng:6.14.3'){
        because("To test the core functionality")
    }
    testImplementation(group: 'net.openhft', name: 'compiler', version: '2.4.0') {
        because("To dynamically compile and test generated code")
    }
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        because("To test the spring endpoint")
    }
}

node {
    nodeModulesDir = file("${project.projectDir}/web")
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

task quoter(type: JavaExec) {
    main = "io.ballerinalang.quoter.QuoterCommandLine"
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('props')) {
        //noinspection GroovyAssignabilityCheck
        args(project.property('props').split(' '))
    }
}

task buildWeb (type: NpmTask) {
    args = ['run', 'build']
}

task copyWebResources(type: Copy) {
    doFirst {
        npmInstall
        buildWeb
    }
    from "${projectDir}/web/build"
    into "${buildDir}/resources/main/static"
}

compileJava.dependsOn(copyWebResources)